// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  password         String
  profilePictureId Int?
  profilePicture   File?              @relation(fields: [profilePictureId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  projects         ProjectMember[]
  subProjects      SubprojectMember[]
  Chat             Chat[]
}

model File {
  id          Int       @id @default(autoincrement())
  name        String
  imagePath   String
  contentType String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  users       User[]

  projectAttachments    Project[]    @relation("ProjectAttachments")
  projectReports        Project[]    @relation("ProjectReports")
  subProjectAttachments SubProject[] @relation("SubProjectAttachments")
  subProjectReports     SubProject[] @relation("SubProjectReports")
  project               Project[]
  Block                 Block[]
}

model RecentActivities {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  project    Project[]
  subProject SubProject[]
  finding    Finding[]
}

model Project {
  id               Int             @id @default(autoincrement())
  name             String
  archived         Boolean
  startDate        DateTime
  endDate          DateTime
  projectPictureId Int?
  projectPicture   File?           @relation(fields: [projectPictureId], references: [id])
  members          ProjectMember[]
  attachments      File[]          @relation("ProjectAttachments")
  reports          File[]          @relation("ProjectReports")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?

  subProjects        SubProject[]
  recentActivities   RecentActivities @relation(fields: [recentActivitiesId], references: [id])
  recentActivitiesId Int
}

model ProjectMember {
  id        Int         @id @default(autoincrement())
  member    User        @relation(fields: [memberId], references: [id])
  memberId  Int
  role      ProjectRole
  project   Project     @relation(fields: [projectId], references: [id])
  projectId Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?

  @@unique([projectId, memberId])
}

model SubProject {
  id                 Int                @id @default(autoincrement())
  name               String
  startDate          DateTime
  endDate            DateTime
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  deletedAt          DateTime?
  members            SubprojectMember[]
  findings           Finding[]
  attachments        File[]             @relation("SubProjectAttachments")
  reports            File[]             @relation("SubProjectReports")
  recentActivities   RecentActivities   @relation(fields: [recentActivitiesId], references: [id])
  recentActivitiesId Int
  project            Project            @relation(fields: [projectId], references: [id])
  projectId          Int
  chatRoom           ChatRoom           @relation(fields: [chatRoomId], references: [id])
  chatRoomId         Int
}

model SubprojectMember {
  id           Int            @id @default(autoincrement())
  role         SubprojectRole
  subproject   SubProject     @relation(fields: [subprojectId], references: [id])
  subprojectId Int
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?

  @@unique([subprojectId, userId])
}

model Finding {
  id          Int      @id @default(autoincrement())
  name        String
  risk        String?
  location    String?
  method      String?
  environment String?
  application String?
  impact      String?
  likelihood  String?
  findingDate DateTime

  description    Block[] @relation("FindingsDescription")
  threatAndRisk  Block[] @relation("FindingsThreat")
  businessImpact Block[] @relation("FindingsBusinessImpact")
  recomendation  Block[] @relation("FindingsRecomendation")
  retestResult   Block[] @relation("FindingsRetestResult")

  subProject         SubProject       @relation(fields: [subProjectId], references: [id])
  subProjectId       Int
  recentActivities   RecentActivities @relation(fields: [recentActivitiesId], references: [id])
  recentActivitiesId Int
}

model Block {
  id                    String    @id @default(uuid())
  content               String    @default("<p></p>")
  type                  BlockType @default(PARAGRAPH)
  fileId                Int?
  file                  File?     @relation(fields: [fileId], references: [id])
  isChecked             Boolean   @default(false)
  previousBlockId       String?   @unique
  previousBlock         Block?    @relation("BlockPreviousBlock", fields: [previousBlockId], references: [id])
  nextBlock             Block?    @relation("BlockPreviousBlock")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  findingDescriptions   Finding[] @relation("FindingsDescription")
  findingThreatAndRisk  Finding[] @relation("FindingsThreat")
  findingBusinessImpact Finding[] @relation("FindingsBusinessImpact")
  findingRecomendation  Finding[] @relation("FindingsRecomendation")
  findingRetestResult   Finding[] @relation("FindingsRetestResult")
}

model ChatRoom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chats     Chat[]

  SubProject SubProject[]
}

model Chat {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String
  sender      User     @relation(fields: [userId], references: [id])
  replyChatId Int?
  replyChat   Chat?    @relation("Replies", fields: [replyChatId], references: [id])
  repliedBy   Chat[]   @relation("Replies")

  userId     Int
  ChatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int?
}

enum BlockType {
  HEADING_1
  HEADING_2
  HEADING_3
  BLOCK_QUOTES
  BULLET_LIST
  NUMBERED_LIST
  CHECKBOX
  PARAGRAPH
  DIVIDER
  FILE
  IMAGE
  COLLECTION
}

enum ProjectRole {
  VIEWER
  OWNER
  DEVELOPER
  TECHNICAL_WRITER
}

enum SubprojectRole {
  PM
  DEVELOPER
  TECHNICAL_WRITER
  GUEST
  CONSULTANT
}
