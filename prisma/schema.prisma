// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  password         String
  profilePictureId Int?
  profilePicture   File?              @relation(fields: [profilePictureId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  projects         ProjectMember[]
  subProjects      SubprojectMember[]
}

model File {
  id          Int       @id @default(autoincrement())
  name        String
  imagePath   String
  contentType String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  users       User[]

  projectAttachments    Project[]    @relation("ProjectAttachments")
  projectReports        Project[]    @relation("ProjectReports")
  subProjectAttachments SubProject[] @relation("SubProjectAttachments")
  subProjectReports     SubProject[] @relation("SubProjectReports")
  project               Project[]
}

model RecentActivites {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  Project    Project[]
  SubProject SubProject[]
  Finding    Finding[]
}

model Project {
  id               Int             @id @default(autoincrement())
  name             String
  archived         Boolean
  startDate        DateTime
  endDate          DateTime
  projectPictureId Int?
  projectPicture   File?           @relation(fields: [projectPictureId], references: [id])
  members          ProjectMember[]
  attachments      File[]          @relation("ProjectAttachments")
  reports          File[]          @relation("ProjectReports")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?

  subProjects       SubProject[]
  recentActivities  RecentActivites @relation(fields: [recentActivitesId], references: [id])
  recentActivitesId Int
}

model ProjectMember {
  id        Int         @id @default(autoincrement())
  member    User        @relation(fields: [memberId], references: [id])
  memberId  Int
  role      ProjectRole
  project   Project     @relation(fields: [projectId], references: [id])
  projectId Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?
}

model SubProject {
  id                Int                @id @default(autoincrement())
  name              String
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  members           SubprojectMember[]
  findings          Finding[]
  attachments       File[]             @relation("SubProjectAttachments")
  reports           File[]             @relation("SubProjectReports")
  recentActivities  RecentActivites    @relation(fields: [recentActivitesId], references: [id])
  recentActivitesId Int
  project           Project            @relation(fields: [projectId], references: [id])
  projectId         Int
}

model SubprojectMember {
  id           Int            @id @default(autoincrement())
  role         SubprojectRole
  subproject   SubProject     @relation(fields: [subprojectId], references: [id])
  subprojectId Int
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
}

model Finding {
  id            Int     @id @default(autoincrement())
  name          String
  risk          String

  description   Block[] @relation("FindingsDescription")
  threatAndRisk Block[] @relation("FindingsThreat")
  impact        Block[] @relation("FindingsImpact")
  recomendation Block[] @relation("FindingsRecomendation")
  retestResult  Block[] @relation("FindingsRetestResult")

  subProject        SubProject      @relation(fields: [subProjectId], references: [id])
  subProjectId      Int
  recentActivities  RecentActivites @relation(fields: [recentActivitesId], references: [id])
  recentActivitesId Int
}




model Block {
  id                   String    @id @default(uuid())
  content              String
  previousBlockId      String?   @unique
  previousBlock        Block?    @relation("BlockPreviousBlock", fields: [previousBlockId], references: [id])
  nextBlock            Block?    @relation("BlockPreviousBlock")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  findingDescriptions  Finding[] @relation("FindingsDescription")
  findingThreatAndRisk Finding[] @relation("FindingsThreat")
  findingImpact        Finding[] @relation("FindingsImpact")
  findingRecomendation Finding[] @relation("FindingsRecomendation")
  findingRetestResult  Finding[] @relation("FindingsRetestResult")
}

enum ProjectRole {
  VIEWER
  OWNER
  DEVELOPER
  TECHNICAL_WRITER
}

enum SubprojectRole {
  PM
  DEVELOPER
  TECHNICAL_WRITER
  GUEST
  CONSULTANT
}
