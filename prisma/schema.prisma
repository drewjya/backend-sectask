// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  password         String
  profilePictureId Int?
  profilePicture   File?              @relation(fields: [profilePictureId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  projects         ProjectMember[]
  subProjects      SubprojectMember[]
  chat             Chat[]
  Finding          Finding[]
}

model File {
  id          Int       @id @default(autoincrement())
  name        String
  imagePath   String
  contentType String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  users       User[]

  projectAttachments    Project[]    @relation("ProjectAttachments")
  projectReports        Project[]    @relation("ProjectReports")
  subProjectAttachments SubProject[] @relation("SubProjectAttachments")
  subProjectReports     SubProject[] @relation("SubProjectReports")
  project               Project[]
}

model ProjectLog {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  project     Project[]
}

model SubProjectLog {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  subproject  SubProject[]
}

model Project {
  id               Int             @id @default(autoincrement())
  name             String
  archived         Boolean
  startDate        DateTime
  endDate          DateTime
  projectPictureId Int?
  projectPicture   File?           @relation(fields: [projectPictureId], references: [id])
  members          ProjectMember[]
  attachments      File[]          @relation("ProjectAttachments")
  reports          File[]          @relation("ProjectReports")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?

  subProjects      SubProject[]
  recentActivities ProjectLog[]
}

model ProjectMember {
  id        Int         @id @default(autoincrement())
  member    User        @relation(fields: [userId], references: [id])
  userId    Int
  role      ProjectRole
  project   Project     @relation(fields: [projectId], references: [id])
  projectId Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?

  @@unique([projectId, userId])
}

model SubProject {
  id               Int                @id @default(autoincrement())
  name             String
  startDate        DateTime
  endDate          DateTime
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  members          SubprojectMember[]
  findings         Finding[]
  attachments      File[]             @relation("SubProjectAttachments")
  reports          File[]             @relation("SubProjectReports")
  recentActivities SubProjectLog[]

  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
}

model SubprojectMember {
  id           Int            @id @default(autoincrement())
  role         SubprojectRole
  subproject   SubProject     @relation(fields: [subprojectId], references: [id])
  subprojectId Int
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  Finding      Finding?       @relation(fields: [findingId], references: [id])
  findingId    Int?

  @@unique([subprojectId, userId])
}

model Finding {
  id          Int     @id @default(autoincrement())
  name        String
  createdBy   User    @relation(fields: [userId], references: [id])
  category    String?
  location    String?
  method      String?
  environment String?
  application String?
  impact      String?
  likelihood  String?

  latestUpdate DateTime?

  cvssDetail CVSS_VALUE
  testers    SubprojectMember[]
  status     String?
  releases   String?

  descriptionId String
  description   Document @relation("findingDescription", fields: [descriptionId], references: [id])

  threatAndRiskId String
  threatAndRisk   Document @relation("findingThreatAndRisk", fields: [threatAndRiskId], references: [id])

  businessImpactId String
  businessImpact   Document @relation("findingBusinessImpact", fields: [businessImpactId], references: [id])

  recommendationId String
  recommendation   Document @relation("findingRecommendation", fields: [recommendationId], references: [id])

  retestResultId String
  retestResult   Document @relation("findingRetestResult", fields: [retestResultId], references: [id])

  subProject   SubProject @relation(fields: [subProjectId], references: [id])
  subProjectId Int
  userId       Int
}

model Document {
  id   String @id
  data Bytes

  findingDescription    Finding[] @relation("findingDescription")
  findingThreatAndRisk  Finding[] @relation("findingThreatAndRisk")
  findingBusinessImpact Finding[] @relation("findingBusinessImpact")
  findingRecommendation Finding[] @relation("findingRecommendation")
  findingRetestResult   Finding[] @relation("findingRetestResult")
}

model CvssDetail {
  id  Int        @id @default(autoincrement())
  av  CVSS_VALUE @default(C0)
  ac  CVSS_VALUE @default(C0)
  at  CVSS_VALUE @default(C0)
  pr  CVSS_VALUE @default(C0)
  ui  CVSS_VALUE @default(C0)
  vc  CVSS_VALUE @default(C2)
  vi  CVSS_VALUE @default(C2)
  va  CVSS_VALUE @default(C2)
  sc  CVSS_VALUE @default(C2)
  si  CVSS_VALUE @default(C2)
  sa  CVSS_VALUE @default(C2)
  s   CVSS_VALUE @default(C0)
  au  CVSS_VALUE @default(C0)
  r   CVSS_VALUE @default(C0)
  v   CVSS_VALUE @default(C0)
  re  CVSS_VALUE @default(C0)
  u   CVSS_VALUE @default(C0)
  mav CVSS_VALUE @default(C0)
  mac CVSS_VALUE @default(C0)
  mat CVSS_VALUE @default(C0)
  mpr CVSS_VALUE @default(C0)
  mui CVSS_VALUE @default(C0)
  mvc CVSS_VALUE @default(C0)
  mvi CVSS_VALUE @default(C0)
  mva CVSS_VALUE @default(C0)
  msc CVSS_VALUE @default(C0)
  msi CVSS_VALUE @default(C0)
  msa CVSS_VALUE @default(C0)
  cr  CVSS_VALUE @default(C0)
  ir  CVSS_VALUE @default(C0)
  ar  CVSS_VALUE @default(C0)
  e   CVSS_VALUE @default(C0)
}

model ChatRoom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chats     Chat[]

  subProject SubProject[]
}

model Chat {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String
  sender      User     @relation(fields: [userId], references: [id])
  replyChatId Int?
  replyChat   Chat?    @relation("Replies", fields: [replyChatId], references: [id])
  repliedBy   Chat[]   @relation("Replies")

  userId     Int
  chatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int?
}

enum EntryType {
  PICTURE
  FILE
  STRING
  NUMBER
  DROPDOWN
  CHECKBOX
  DATE
}

enum CVSS_VALUE {
  C0
  C1
  C2
  C3
}

enum ProjectRole {
  VIEWER
  OWNER
  DEVELOPER
  TECHNICAL_WRITER
}

enum SubprojectRole {
  PM
  DEVELOPER
  TECHNICAL_WRITER
  GUEST
  CONSULTANT
}
