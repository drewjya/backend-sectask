// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  password         String
  profilePictureId Int?               @unique
  profilePicture   File?              @relation(fields: [profilePictureId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  projects         ProjectMember[]
  subProjects      SubprojectMember[]
  chat             Chat[]
  Finding          Finding[]
  TesterFinding    TesterFinding[]
  Project          Project[]
  ChatRoom         ChatRoom[]
  RetestHistory    RetestHistory[]
}

model File {
  id           Int       @id @default(autoincrement())
  name         String
  imagePath    String
  originalName String?
  contentType  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  users          User?
  project        Project?
  projectFile    ProjectFile?
  subprojectFile SubprojectFile?
  findingFile    FindingFile?
}

model ProjectFile {
  id        Int      @id @default(autoincrement())
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    Int      @unique
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  type      FileType
}

model SubprojectFile {
  id           Int        @id @default(autoincrement())
  file         File       @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId       Int        @unique
  subproject   SubProject @relation(fields: [subprojectId], references: [id], onDelete: Cascade)
  subprojectId Int
  type         FileType
}

model FindingFile {
  id        Int     @id @default(autoincrement())
  file      File    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    Int     @unique
  finding   Finding @relation(fields: [findingId], references: [id], onDelete: Cascade)
  findingId Int
}

model ProjectLog {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  project     Project[]
}

model SubProjectLog {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  subproject  SubProject[]
}

model Project {
  id       Int     @id @default(autoincrement())
  name     String
  archived Boolean
  ownerId  Int
  owner    User    @relation(fields: [ownerId], references: [id])

  startDate        DateTime
  endDate          DateTime
  projectPictureId Int?     @unique
  projectPicture   File?    @relation(fields: [projectPictureId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  members          ProjectMember[]
  subProjects      SubProject[]
  recentActivities ProjectLog[]
  projectFile      ProjectFile[]
}

model ProjectMember {
  id               Int                @id @default(autoincrement())
  member           User               @relation(fields: [userId], references: [id])
  userId           Int
  role             ProjectRole
  project          Project            @relation(fields: [projectId], references: [id])
  projectId        Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  subprojectMember SubprojectMember[]

  @@unique([projectId, userId])
}

model SubProject {
  id               Int                @id @default(autoincrement())
  name             String
  startDate        DateTime
  endDate          DateTime
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  members          SubprojectMember[]
  findings         Finding[]
  recentActivities SubProjectLog[]

  project        Project          @relation(fields: [projectId], references: [id])
  projectId      Int
  subprojectFile SubprojectFile[]
}

model SubprojectMember {
  id Int @id @default(autoincrement())

  subproject      SubProject    @relation(fields: [subprojectId], references: [id], onDelete: Cascade)
  subprojectId    Int
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  projectMemberId Int
  projectMember   ProjectMember @relation(fields: [projectMemberId], references: [id], onDelete: Cascade)

  @@unique([subprojectId, userId, projectMemberId])
}

model Finding {
  id           Int       @id @default(autoincrement())
  name         String
  createdBy    User      @relation(fields: [userId], references: [id])
  category     String?
  location     String?
  method       String?
  environment  String?
  application  String?
  impact       String?
  likelihood   String?
  latestUpdate DateTime?

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  cvssDetail CvssDetail?
  status     String?
  releases   String?

  subProject   SubProject @relation(fields: [subProjectId], references: [id], onDelete: Cascade)
  subProjectId Int
  userId       Int

  description   Document @relation("FindingDescription", fields: [descriptionId], references: [id])
  threatAndRisk Document @relation("FindindThreat", fields: [threatAndRiskId], references: [id])

  retestHistories RetestHistory[]
  chatRoom        ChatRoom[]
  testerFinding   TesterFinding[]
  threatAndRiskId String
  descriptionId   String
  FindingFile     FindingFile[]
}

model RetestHistory {
  id        Int      @id @default(autoincrement())
  status    String
  version   String
  tester    User     @relation(fields: [testerId], references: [id])
  testerId  Int
  content   String
  createdAt DateTime @default(now())
  finding   Finding? @relation(fields: [findingId], references: [id], onDelete: Cascade)
  findingId Int?
}

model TesterFinding {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  finding   Finding @relation(fields: [findingId], references: [id], onDelete: Cascade)
  userId    Int
  findingId Int
  active    Boolean @default(true)

  @@unique([userId, findingId])
}

model Document {
  id           String    @id
  data         Bytes
  descriptions Finding[] @relation("FindingDescription")
  threats      Finding[] @relation("FindindThreat")
}

model CvssDetail {
  id        Int     @id @default(autoincrement())
  data      Json
  finding   Finding @relation(fields: [findingId], references: [id], onDelete: Cascade)
  findingId Int     @unique
}

model ChatRoom {
  id        Int      @id @default(autoincrement())
  title     String
  createdBy User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chats     Chat[]

  finding   Finding @relation(fields: [findingId], references: [id], onDelete: Cascade)
  findingId Int
  userId    Int?
}

model Chat {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String
  sender      User     @relation(fields: [userId], references: [id])
  replyChatId Int?
  replyChat   Chat?    @relation("Replies", fields: [replyChatId], references: [id])
  repliedBy   Chat[]   @relation("Replies")

  userId     Int
  chatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int?
}

enum ProjectRole {
  VIEWER
  PM
  DEVELOPER
  TECHNICAL_WRITER
}

enum FileType {
  ATTACHMENT
  REPORT
}
